*** 2-Global Styles ***
we will talk a bout global styles

- we open the app folder and then access to globals.css file 
- we have root where we can define custom property foreground and background and so on
-------------------code----------------------
:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}
-------------------code----------------------

- we have also prefers-color-scheme which we can check if the user is on the dark mode it
-------------------code----------------------
@media (prefers-color-scheme: dark)
-------------------code----------------------

- now in we have the body where we define the style of our body elements and we can see
it uses the values from the root like --background-end-rgb
-------------------code----------------------
body {
  color: rgp(var(--background-end-rgb));
  padding: 1rem;
}
-------------------code----------------------


- now we clean our style sheet by remain only one property --foreground-rgb
-------------------code----------------------
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
  }
}

body {
  color: rgp(var(--foreground-rgb));
  padding: 1rem;
}
-------------------code----------------------


- we copy the app folder from the previous lesson (2-Next.js-Fundamentals)
then we run our application in development mode (when we run our application in development mode we
can see immediately any changes we made)
-------------------code----------------------
npm run dev
-------------------code----------------------

PS:
global.css: to write the styles that apply to all pages, anything related to body/head/footer element

so inside the global.css we should never define a custom classes like user-list cards etc ...
coz as more as our project goes larger global.css we be unmaintainable and more importantly 
as we change or delete our components, we`ll have to remember and do some clean-up again in global.css
otherwise we well end up with dead styles in the global.css


*** 3-CSS Modules ***
Css Module:
A Css file that is scoped to a component/page.
it`s a way is prevent files form clashes or overwriting each other.

- if we have the same name of css classes that defined in two different places in two stylesheets
, these classes can overwrite each other depending on how we import these stylesheets files
so Css module is aim to solve this problem

how Css Module works:

in app folder 3-Styling/next-app/app/components
we have multi component
let`s say we want to write a style for 
-------------------code----------------------
ProductCard2.tsx
-------------------code----------------------

we create to next to it css file but is better to name it the same as the component
and we have to give it .module.css as an extension
-------------------code----------------------
ProductCard2.module.css
-------------------code----------------------

in the ProductCard2.module.css we can define css classes that related to ProductCard2.tsx component
and now we can write styles in ProductCard2.module.css without worrying that is the classes will crash

- we define in ProductCard2.module.css
-------------------code----------------------
.card {
  padding: 1rem;
  border: 1px solid #ccc;
}
-------------------code----------------------

- now we got back to our component and import that sheet  
ProductCard2.tsx
-------------------code----------------------
import styles from "./ProductCard2.module.css";
-------------------code----------------------
the we import it doesn`t matter but typically we go with styles

styles will be JS object and the properties that we define inside the Css file will be
the properties of the styles object

PS:
that`s why we can`t use hyphens in the class name of module.css files coz 
in JS we can`t name property with hyphens ex: .card-container
instead always we should use camel notation ex: .cardContainer

- now apply the style to the element we want 
-------------------code----------------------
<div className={styles.card}>
-------------------code----------------------

now back to our browser when we look the div tool we can see the name of the class of 
-------------------code----------------------
<div className={styles.card}> 
-------------------code----------------------
in the DOM is different and auto generated
-------------------code----------------------
<div class="ProductCard2_card__jGb87"></div>
-------------------code----------------------

- so what is happening here is this project uses a tool called "post CSS" for transforming
our CSS class names to prevent clashes


in our project we have this file 
-------------------code----------------------
postcss.config.js
-------------------code----------------------

inside it we have 
-------------------code----------------------
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
-------------------code----------------------

for the most part we don`t have to touch this configuration, but if someone advanced post Css user
here where it can provide the custom configuration

so when building our application Next.Js uses post Css to transform our class names and generate
unique class names that don`t clash

if we don`t want to mix our tsx and module.css file we can create folder and name with the component file and
add our all components file inside it ex: ProductCard folder and inside it we put ProductCard.tsx and 
ProductCard.module.css

PS: we can also Css module to ours page.tsx also 


*** 4-Tailwind Css ***
Tailwind is a famous CSS framework using the concept of utility classes

ex:

some classes for control of classes 
-------------------code----------------------
padding:
p-[number] => padding
px-[number] => horizontal padding
px-[number] => vertical padding
pt-[number] => top padding
pr-[number] => right padding
pb-[number] => bottom padding
pl-[number] => left padding
-------------------code----------------------

margin:
-------------------code----------------------
m-[number] => margin
mx-[number] => horizontal margin
mx-[number] => vertical margin
mt-[number] => top margin
mr-[number] => right margin
mb-[number] => bottom margin
ml-[number] => left margin
-------------------code----------------------

Text:
-------------------code----------------------
- Size:
text-xs
text-sm
text-base
text-lg
text-xl
text-2xl
text-3xl
text-4xl
-------------------code----------------------
- Color:
text-[color] 
-------------------code----------------------
bg-[color] => background color
-------------------code----------------------

-Thickness:
-------------------code----------------------
font-thin
font-light
font-normal
font-medium
font-bold
-------------------code----------------------

if we google "Tailwind color palette" we can see all the colors palate that comes with tailwind
-------------------code----------------------
https://tailwindcss.com/docs/customizing-colors
-------------------code----------------------

this the idea of Tailwind of course there is ton of classes 

to see it in action:

- in ProductCard2.tsx 
-------------------code----------------------
<div className="p-5 my-5 bg-sky-400 text-white text-xl">Hi</div>
-------------------code----------------------


we can also apply hover to it 
-------------------code----------------------
<div className="p-5 my-5 bg-sky-400 text-white text-xl hover:bg-sky-600">
-------------------code----------------------

the idea of Tailwind to style our component inside the tsx file 
instead of jumping between CSS and TSX file 

one benefit to use Tailwind:
when we build our application, our final css bundle will only have the utility
classes that we used in our markup.
so if tomorrow we delete this element
ex:
-------------------code----------------------
<div className="p-5 my-5 bg-sky-400 text-white text-xl">Hi</div>
-------------------code----------------------
none of there css classes will be in our final Css bundle, unless we have used them somewhere else
otherwise when using module.css we have to clean unused classes of the component changed

*** 5-Daisy UI ***
Daisy UI: is very popular component library for tailwind (it`s like bootstrap but for tailwind)
instead of combining small classes using tailwind we use Daisy UI the same idea of bootstrap


to install in our project first we go to the download page
https://daisyui.com/docs/install/

1- install the daisyUi for the development 
-------------------code---------------------- 
npm i -D daisyui@latest
-------------------code----------------------
2- inside the tailwind.config.ts
we change 
-------------------code----------------------
plugins: []
-------------------code----------------------
with:
-------------------code----------------------
plugins: [require("daisyui")]
-------------------code----------------------

we will try buttons as demo 
in this file we modify the button 
3-Styling/next-app/app/components/AddToCart.tsx
by adding btn btn-primary
-------------------code----------------------
<>
  <button className="btn btn-primary" onClick={() => console.log("Click")}>
    Add to Cart
  </button>
</>
-------------------code----------------------

- in Daisy UI there is the concept of theme 
to change the them of our application
-------------------code----------------------
https://daisyui.com/docs/themes/
-------------------code----------------------
in config
-------------------code----------------------
daisyui: {
    # here we add the them we wants 
    themes: ["light", "dark", "cupcake"],
  }
-------------------code----------------------
for these demo we will only use 
-------------------code----------------------
daisyui: {
    themes: ["night"],
  }
-------------------code----------------------


then we go to the layout.tsx coz here where we have the html element
-------------------code----------------------
<html data-theme="night" lang="en">
  <body className={inter.className}>{children}</body>
</html>
-------------------code----------------------

- in users page we put the mapping logic inside a table 
we change the ul with table
-------------------code----------------------
<table>
  {users.map((user) => (
    <li key={user.id}>{user.name}</li>
  ))}
</table>
-------------------code----------------------
inside the table we create 
-------------------code----------------------
thead>tr>th*2
-------------------code----------------------

the first th we want to show the name 
the secund we want to show the email 

under that we create tbody and move the mapping code to inside it
and replace the li with tr
-------------------code----------------------
{users.map((user) => (
  <tr key={user.id}>{user.name}</tr>
))}
-------------------code----------------------
and inside the tr we create td*2 to render the name and email
-------------------code----------------------
<tr key={user.id}>
  <td>{user.name}</td>
  <td>{user.email}</td>
</tr>
-------------------code----------------------
currently we don`t have the email so we add it to the interface 

to make our table nicer we add some tailwind classes to our table 
-------------------code----------------------
<table className="table">
-------------------code----------------------

- now the it look like that 
-------------------code----------------------
const UserPage = async () => {
  const res = await fetch("https://jsonplaceholder.typicode.com/users");

  const users: Users[] = await res.json();
  return (
    <>
      <h1>Users</h1>
      <p>{new Date().toLocaleTimeString()}</p>
      <table className="table table-borderd">
        <thead>
          <tr>
            <th>Name</th>
            <th>Email</th>
          </tr>
        </thead>
        <tbody>
          {users.map((user) => (
            <tr key={user.id}>
              <td>{user.name}</td>
              <td>{user.email}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </>
  );
};
-------------------code----------------------
