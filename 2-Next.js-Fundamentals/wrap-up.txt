*** 2-What is Next.Js ***
- What is Next.Js:
a framework for building fast & search-engine friendly applications
is built in top of React 

=> so everything we have learnt a bout React is still relevant But
Next.Js takes web development to the next level
While React is just a library for creating interactive (UIs)
Next.Js is comprehensive framework 

a framework = libs + tools + conventions that streamline application development

Next.Js is including it`s own routing library so we don`t need to use a separate library ex: when React we used react-routes

- Next.Js come with:
1- Compiler:
Transform & minify JS code

2- CLI:
Build & Start apps 

3- Node.js Runtime:
Excute JS Code

- What is a Node.Js runtime?
before 2009 JavaScript only was excuteble inside the server until 
Ryan Dahl create Node to make JavaScript runs outside the Browser

there is two ways that we can excute JavaScript
web Browser => client side
Node.js => Server side

Node.js is a fancy term for a program that can excute JavaScript code 

- Next.Js comes with a Node.js runtime and this allows us to do really cool things 
1- we can do Full-stack development
so we can write both the front-end and the back-end within the same Next.Js project
Back-end code runs with Node.Js
Front-end code runs with Web Browser
so the code we wrote in the Back-end it sent to the client for excution within a web browser

=> in contrast when building application with React we have to maintain a separate Back-end project 
in a potentially different programming language

2- allows us to render our component on the server
and sent it content to the client
This Technique is called "Server-Side Rendering(SSR) "
and it makes our application
- faster
- more search-engine friendly

- with Next.Js we can rerender certain pages and component that have 
static data when we build our application
we just render them once and serve them whenever they are needed 
This Technique is called "Static-Site Generation"
and can make our application super fast

*** 3-Setting-Up-the-Development-Enviromnet ***
from nodejs.org download the latest versoin
download the extentions:
- Name: ES7+ React/Redux/React-Native snippets
VS Marketplace Link: https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets
https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets
- Name: JavaScript and TypeScript Nightly
VS Marketplace Link: https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next
- Name: Tailwind CSS IntelliSense
VS Marketplace Link: https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss


*** 4-Creating Your First Next.Js Project *** 
in terminal we type

npx create-next-app@13.4.13

PS: choose the defualt valuse 
Ok to proceed? (y) y
✔ What is your project named? … next-app
✔ Would you like to use TypeScript? … No / Yes
✔ Would you like to use ESLint? … No / Yes
✔ Would you like to use Tailwind CSS? … No / Yes
✔ Would you like to use `src/` directory? … No / Yes
✔ Would you like to use App Router? (recommended) … No / Yes
✔ Would you like to customize the default import alias? › No / Yes


*** 5-Project Structure ***
folders:
-- app => called the app-folder or app-router this file is the container
of our routing system

inisde the app-folder:
we have
- global-css: for global styling

- layout.tsx: basic react component that returns an html and body elements
this represent the common layout for our pages
inside the body element we childer
<body className={inter.className}>{children}</body>
which is replaced by a page dynamically at the runtime depending on where the user is in our application

- page.tsx: represent our home-page 
for this demo we will remove everything inside the return statment and we will return

return <main>Hello World</main>;

in our browser we can see the Hello world with fast refresh
so anytime we make any changes to our typescript or css files, the changes are reflected immediately

now we can see our main page in browser have a style that coz the styles which applied
to the body element inside the globals.css file

to remove the linear background we remove the 

background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));

from the body element in globals.css

(coz my chrome is black the defualt font-color is white so i changed the color)
from 
color: rgb(var(--foreground-rgb));
to 
color: black

finaly we apply padding 1 rem to the body so our text is not too close to the edge
padding: 1rem;


-- public folder
this where we can put our public assests, like images

and other configurations files for the most part we don`t have to touch them 
if in the future we needed to change any one of it we will revisit them

*** 6-Routing-and-Navigatio ***

- Routing:
- the Routing in Next.js is based on the file system
in the app folder we create new folder users
to make the users folder publicly accessible, we should add inside it page.tsx/page.jsx file
Ps: make to sure to name it page in lower case coz the conventions that the Next.Js looks for
so the route file system in Next.Js is based on convention not configuration

- inside the page.tsx
in this file we should export a react component that will be rerendered when the user is at this location "/users"

now we generating component using rafce after creating the the component we should the function with capital letters
in this case 
instead of 
const page ==> const UserPage

in our browser we go to 
http://localhost:3000/users
we will see the new component

- another thing a bout the routing system in Next.Js
in the users folder we added another file baside the page.tsx it will not be accessible
ex:
http://localhost:3000/users/test.css
we will have this page can`t be found

- we can create a nasted routes
for example inside the users folder we can add new folder and again inside the new folder we create page.tsx
now if we access to 
http://localhost:3000/users/new
we will see 
NewUserPage (the page.tsx component inside the users/new folder)

- Navigation:
in the page.tsx of app folder 
if we want to navigate we don`t user a(hayper text)
<a href="/users">Users</a>
the reason why coz everytime we click on that Users all the style sheets are redownloaded
which make our application performance slow when it became bigger
for example we clike on Users we don`t want to rerender the same parts (NavBar, Side-Menu, UserCompnent) only we 
want to render the Users component
(we can check that using the Network tab and see all the resourses are redownloaded even if clear them when click the Users hypertext)

this where we use the link Component  
<Link href="/users">Users</Link>
and we can see only the UserCompnent requests and only in resourses we see the content 
of the add/new/page.tsx content that what we called Client Side Navigation

